{
    "sourceFile": "src/modules/branch/wallet_adjustments/wallet-adjustment.controller.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1761666027143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761666286361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,8 @@\n   CreateFoundAdjustmentDto,\r\n   CreateLostAdjustmentDto,\r\n } from './dto/specific-adjustment.dto';\r\n import { PaginationDto } from 'src/shared/dto/pagination.dto';\r\n-import { CreateWalletAdjustmentUseCase } from './application/commands/create-wallet-adjustment.usecase';\r\n import { CreateWalletAdjustmentDispositUseCase } from './application/commands/create-wallet-adjustment-disposit.usecase';\r\n import { CreateWalletAdjustmentWithdrawUseCase } from './application/commands/create-wallet-adjustment-withdraw.usecase';\r\n import { CreateWalletAdjustmentFoundUseCase } from './application/commands/create-wallet-adjustment-found.usecase';\r\n import { CreateWalletAdjustmentLostUseCase } from './application/commands/create-wallet-adjustment-lost.usecase';\r\n"
                },
                {
                    "date": 1761666295358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n \r\n @Controller('wallet-adjustments')\r\n export class WalletAdjustmentController {\r\n   constructor(\r\n-    private readonly createWalletAdjustmentUseCase: CreateWalletAdjustmentUseCase,\r\n     private readonly createDepositAdjustmentUseCase: CreateWalletAdjustmentDispositUseCase,\r\n     private readonly createWithdrawAdjustmentUseCase: CreateWalletAdjustmentWithdrawUseCase,\r\n     private readonly createFoundAdjustmentUseCase: CreateWalletAdjustmentFoundUseCase,\r\n     private readonly createLostAdjustmentUseCase: CreateWalletAdjustmentLostUseCase,\r\n@@ -43,17 +42,8 @@\n   /**\r\n    * Create a new wallet adjustment (status: PENDING)\r\n    * Does not affect wallet balance until approved\r\n    */\r\n-  @Post()\r\n-  async create(\r\n-    @Body() dto: CreateWalletAdjustmentDto,\r\n-  ): Promise<WalletAdjustmentResponse> {\r\n-    return WalletAdjustmentMapper.toResponse(\r\n-      await this.createWalletAdjustmentUseCase.execute(dto),\r\n-    );\r\n-  }\r\n-\r\n   /**\r\n    * Create a deposit adjustment (Immediately adds money to wallet)\r\n    */\r\n   @Post('deposit')\r\n"
                },
                {
                    "date": 1761669392888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,13 +14,15 @@\n   CreateWithdrawAdjustmentDto,\r\n   CreateFoundAdjustmentDto,\r\n   CreateLostAdjustmentDto,\r\n } from './dto/specific-adjustment.dto';\r\n+import { CreateWalletTransferDto } from './dto/create-wallet-transfer.dto';\r\n import { PaginationDto } from 'src/shared/dto/pagination.dto';\r\n import { CreateWalletAdjustmentDispositUseCase } from './application/commands/create-wallet-adjustment-disposit.usecase';\r\n import { CreateWalletAdjustmentWithdrawUseCase } from './application/commands/create-wallet-adjustment-withdraw.usecase';\r\n import { CreateWalletAdjustmentFoundUseCase } from './application/commands/create-wallet-adjustment-found.usecase';\r\n import { CreateWalletAdjustmentLostUseCase } from './application/commands/create-wallet-adjustment-lost.usecase';\r\n+import { CreateWalletAdjustmentTransferUseCase } from './application/commands/create-wallet-adjustment-transfer.usecase';\r\n import { ApproveAdjustmentUseCase } from './application/commands/approve-adjustment.usecase';\r\n import { FindOneWalletAdjustmentUseCase } from './application/queries/findOne-wallet-adjustment.usecase';\r\n import { FindAllWalletAdjustmentUseCase } from './application/queries/find-wallet-adjustment.usecase';\r\n import { PaginatedResponse } from 'src/shared/interface/pagination.interface';\r\n@@ -33,18 +35,16 @@\n     private readonly createDepositAdjustmentUseCase: CreateWalletAdjustmentDispositUseCase,\r\n     private readonly createWithdrawAdjustmentUseCase: CreateWalletAdjustmentWithdrawUseCase,\r\n     private readonly createFoundAdjustmentUseCase: CreateWalletAdjustmentFoundUseCase,\r\n     private readonly createLostAdjustmentUseCase: CreateWalletAdjustmentLostUseCase,\r\n+    private readonly createTransferAdjustmentUseCase: CreateWalletAdjustmentTransferUseCase,\r\n     private readonly approveAdjustmentUseCase: ApproveAdjustmentUseCase,\r\n     private readonly findOneWalletAdjustmentUseCase: FindOneWalletAdjustmentUseCase,\r\n     private readonly findAllWalletAdjustmentUseCase: FindAllWalletAdjustmentUseCase,\r\n   ) {}\r\n \r\n+\r\n   /**\r\n-   * Create a new wallet adjustment (status: PENDING)\r\n-   * Does not affect wallet balance until approved\r\n-   */\r\n-  /**\r\n    * Create a deposit adjustment (Immediately adds money to wallet)\r\n    */\r\n   @Post('deposit')\r\n   async createDeposit(\r\n@@ -111,8 +111,20 @@\n     );\r\n   }\r\n \r\n   /**\r\n+   * Create a transfer between two branches (Atomic transaction)\r\n+   */\r\n+  @Post('transfer')\r\n+  async createTransfer(\r\n+    @Body() dto: CreateWalletTransferDto,\r\n+  ): Promise<WalletAdjustmentResponse> {\r\n+    return WalletAdjustmentMapper.toResponse(\r\n+      await this.createTransferAdjustmentUseCase.execute(dto),\r\n+    );\r\n+  }\r\n+\r\n+  /**\r\n    * Get all adjustments\r\n    */\r\n   @Get()\r\n   async findAll(\r\n"
                },
                {
                    "date": 1761673121948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n   Body,\r\n   Param,\r\n   Patch,\r\n   Query,\r\n+  UseGuards,\r\n } from '@nestjs/common';\r\n import { CreateWalletAdjustmentDto } from './dto/create-wallet-adjustment.dto';\r\n import { ApproveAdjustmentDto } from './dto/approve-adjustment.dto';\r\n import {\r\n@@ -27,10 +28,13 @@\n import { FindAllWalletAdjustmentUseCase } from './application/queries/find-wallet-adjustment.usecase';\r\n import { PaginatedResponse } from 'src/shared/interface/pagination.interface';\r\n import { WalletAdjustmentMapper } from './infrastructure/wallet-adjustment.mapper';\r\n import { WalletAdjustmentResponse } from './interface/wallet-adjustment.interface';\r\n+import { JwtAuthGuard } from 'src/guards/AuthGuard';\r\n+import { CurrentUser } from 'src/shared/decorator/user.decorator';\r\n \r\n @Controller('wallet-adjustments')\r\n+@UseGuards(JwtAuthGuard)\r\n export class WalletAdjustmentController {\r\n   constructor(\r\n     private readonly createDepositAdjustmentUseCase: CreateWalletAdjustmentDispositUseCase,\r\n     private readonly createWithdrawAdjustmentUseCase: CreateWalletAdjustmentWithdrawUseCase,\r\n@@ -48,16 +52,17 @@\n    */\r\n   @Post('deposit')\r\n   async createDeposit(\r\n     @Body() dto: CreateDepositAdjustmentDto,\r\n+    @CurrentUser() user: any,\r\n   ): Promise<WalletAdjustmentResponse> {\r\n     const adjustmentDto: CreateWalletAdjustmentDto = {\r\n       ...dto,\r\n       adjustment_type: 'ADD' as any,\r\n       reason: 'DEPOSIT' as any,\r\n     };\r\n     return WalletAdjustmentMapper.toResponse(\r\n-      await this.createDepositAdjustmentUseCase.execute(adjustmentDto),\r\n+      await this.createDepositAdjustmentUseCase.execute(adjustmentDto, user.id),\r\n     );\r\n   }\r\n \r\n   /**\r\n@@ -65,16 +70,17 @@\n    */\r\n   @Post('withdraw')\r\n   async createWithdraw(\r\n     @Body() dto: CreateWithdrawAdjustmentDto,\r\n+    @CurrentUser() user: any,\r\n   ): Promise<WalletAdjustmentResponse> {\r\n     const adjustmentDto: CreateWalletAdjustmentDto = {\r\n       ...dto,\r\n       adjustment_type: 'DEDUCT' as any,\r\n       reason: 'WITHDRAW' as any,\r\n     };\r\n     return WalletAdjustmentMapper.toResponse(\r\n-      await this.createWithdrawAdjustmentUseCase.execute(adjustmentDto),\r\n+      await this.createWithdrawAdjustmentUseCase.execute(adjustmentDto, user.id),\r\n     );\r\n   }\r\n \r\n   /**\r\n@@ -82,16 +88,17 @@\n    */\r\n   @Post('found')\r\n   async createFound(\r\n     @Body() dto: CreateFoundAdjustmentDto,\r\n+    @CurrentUser() user: any,\r\n   ): Promise<WalletAdjustmentResponse> {\r\n     const adjustmentDto: CreateWalletAdjustmentDto = {\r\n       ...dto,\r\n       adjustment_type: 'ADD' as any,\r\n       reason: 'FOUND' as any,\r\n     };\r\n     return WalletAdjustmentMapper.toResponse(\r\n-      await this.createFoundAdjustmentUseCase.execute(adjustmentDto),\r\n+      await this.createFoundAdjustmentUseCase.execute(adjustmentDto, user.id),\r\n     );\r\n   }\r\n \r\n   /**\r\n@@ -99,16 +106,17 @@\n    */\r\n   @Post('lost')\r\n   async createLost(\r\n     @Body() dto: CreateLostAdjustmentDto,\r\n+    @CurrentUser() user: any,\r\n   ): Promise<WalletAdjustmentResponse> {\r\n     const adjustmentDto: CreateWalletAdjustmentDto = {\r\n       ...dto,\r\n       adjustment_type: 'DEDUCT' as any,\r\n       reason: 'LOST' as any,\r\n     };\r\n     return WalletAdjustmentMapper.toResponse(\r\n-      await this.createLostAdjustmentUseCase.execute(adjustmentDto),\r\n+      await this.createLostAdjustmentUseCase.execute(adjustmentDto, user.id),\r\n     );\r\n   }\r\n \r\n   /**\r\n@@ -116,11 +124,12 @@\n    */\r\n   @Post('transfer')\r\n   async createTransfer(\r\n     @Body() dto: CreateWalletTransferDto,\r\n+    @CurrentUser() user: any,\r\n   ): Promise<WalletAdjustmentResponse> {\r\n     return WalletAdjustmentMapper.toResponse(\r\n-      await this.createTransferAdjustmentUseCase.execute(dto),\r\n+      await this.createTransferAdjustmentUseCase.execute(dto, user.id),\r\n     );\r\n   }\r\n \r\n   /**\r\n@@ -153,10 +162,11 @@\n   @Patch(':id/approve')\r\n   async approve(\r\n     @Param('id') id: number,\r\n     @Body() dto: ApproveAdjustmentDto,\r\n+    @CurrentUser() user: any,\r\n   ): Promise<WalletAdjustmentResponse> {\r\n     return WalletAdjustmentMapper.toResponse(\r\n-      await this.approveAdjustmentUseCase.execute(+id, dto),\r\n+      await this.approveAdjustmentUseCase.execute(+id, dto, user.id),\r\n     );\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1761666027143,
            "name": "Commit-0",
            "content": "import {\r\n  Controller,\r\n  Get,\r\n  Post,\r\n  Body,\r\n  Param,\r\n  Patch,\r\n  Query,\r\n} from '@nestjs/common';\r\nimport { CreateWalletAdjustmentDto } from './dto/create-wallet-adjustment.dto';\r\nimport { ApproveAdjustmentDto } from './dto/approve-adjustment.dto';\r\nimport {\r\n  CreateDepositAdjustmentDto,\r\n  CreateWithdrawAdjustmentDto,\r\n  CreateFoundAdjustmentDto,\r\n  CreateLostAdjustmentDto,\r\n} from './dto/specific-adjustment.dto';\r\nimport { PaginationDto } from 'src/shared/dto/pagination.dto';\r\nimport { CreateWalletAdjustmentUseCase } from './application/commands/create-wallet-adjustment.usecase';\r\nimport { CreateWalletAdjustmentDispositUseCase } from './application/commands/create-wallet-adjustment-disposit.usecase';\r\nimport { CreateWalletAdjustmentWithdrawUseCase } from './application/commands/create-wallet-adjustment-withdraw.usecase';\r\nimport { CreateWalletAdjustmentFoundUseCase } from './application/commands/create-wallet-adjustment-found.usecase';\r\nimport { CreateWalletAdjustmentLostUseCase } from './application/commands/create-wallet-adjustment-lost.usecase';\r\nimport { ApproveAdjustmentUseCase } from './application/commands/approve-adjustment.usecase';\r\nimport { FindOneWalletAdjustmentUseCase } from './application/queries/findOne-wallet-adjustment.usecase';\r\nimport { FindAllWalletAdjustmentUseCase } from './application/queries/find-wallet-adjustment.usecase';\r\nimport { PaginatedResponse } from 'src/shared/interface/pagination.interface';\r\nimport { WalletAdjustmentMapper } from './infrastructure/wallet-adjustment.mapper';\r\nimport { WalletAdjustmentResponse } from './interface/wallet-adjustment.interface';\r\n\r\n@Controller('wallet-adjustments')\r\nexport class WalletAdjustmentController {\r\n  constructor(\r\n    private readonly createWalletAdjustmentUseCase: CreateWalletAdjustmentUseCase,\r\n    private readonly createDepositAdjustmentUseCase: CreateWalletAdjustmentDispositUseCase,\r\n    private readonly createWithdrawAdjustmentUseCase: CreateWalletAdjustmentWithdrawUseCase,\r\n    private readonly createFoundAdjustmentUseCase: CreateWalletAdjustmentFoundUseCase,\r\n    private readonly createLostAdjustmentUseCase: CreateWalletAdjustmentLostUseCase,\r\n    private readonly approveAdjustmentUseCase: ApproveAdjustmentUseCase,\r\n    private readonly findOneWalletAdjustmentUseCase: FindOneWalletAdjustmentUseCase,\r\n    private readonly findAllWalletAdjustmentUseCase: FindAllWalletAdjustmentUseCase,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new wallet adjustment (status: PENDING)\r\n   * Does not affect wallet balance until approved\r\n   */\r\n  @Post()\r\n  async create(\r\n    @Body() dto: CreateWalletAdjustmentDto,\r\n  ): Promise<WalletAdjustmentResponse> {\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.createWalletAdjustmentUseCase.execute(dto),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a deposit adjustment (Immediately adds money to wallet)\r\n   */\r\n  @Post('deposit')\r\n  async createDeposit(\r\n    @Body() dto: CreateDepositAdjustmentDto,\r\n  ): Promise<WalletAdjustmentResponse> {\r\n    const adjustmentDto: CreateWalletAdjustmentDto = {\r\n      ...dto,\r\n      adjustment_type: 'ADD' as any,\r\n      reason: 'DEPOSIT' as any,\r\n    };\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.createDepositAdjustmentUseCase.execute(adjustmentDto),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a withdraw adjustment (Immediately removes money from wallet)\r\n   */\r\n  @Post('withdraw')\r\n  async createWithdraw(\r\n    @Body() dto: CreateWithdrawAdjustmentDto,\r\n  ): Promise<WalletAdjustmentResponse> {\r\n    const adjustmentDto: CreateWalletAdjustmentDto = {\r\n      ...dto,\r\n      adjustment_type: 'DEDUCT' as any,\r\n      reason: 'WITHDRAW' as any,\r\n    };\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.createWithdrawAdjustmentUseCase.execute(adjustmentDto),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a found money adjustment (Adds found money to wallet)\r\n   */\r\n  @Post('found')\r\n  async createFound(\r\n    @Body() dto: CreateFoundAdjustmentDto,\r\n  ): Promise<WalletAdjustmentResponse> {\r\n    const adjustmentDto: CreateWalletAdjustmentDto = {\r\n      ...dto,\r\n      adjustment_type: 'ADD' as any,\r\n      reason: 'FOUND' as any,\r\n    };\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.createFoundAdjustmentUseCase.execute(adjustmentDto),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create a lost money adjustment (Removes lost money from wallet)\r\n   */\r\n  @Post('lost')\r\n  async createLost(\r\n    @Body() dto: CreateLostAdjustmentDto,\r\n  ): Promise<WalletAdjustmentResponse> {\r\n    const adjustmentDto: CreateWalletAdjustmentDto = {\r\n      ...dto,\r\n      adjustment_type: 'DEDUCT' as any,\r\n      reason: 'LOST' as any,\r\n    };\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.createLostAdjustmentUseCase.execute(adjustmentDto),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all adjustments\r\n   */\r\n  @Get()\r\n  async findAll(\r\n    @Query() query: PaginationDto,\r\n  ): Promise<PaginatedResponse<WalletAdjustmentResponse>> {\r\n    return WalletAdjustmentMapper.toResponseList(\r\n      await this.findAllWalletAdjustmentUseCase.execute(query),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get single adjustment by ID\r\n   */\r\n  @Get(':id')\r\n  async findOne(@Param('id') id: number): Promise<WalletAdjustmentResponse> {\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.findOneWalletAdjustmentUseCase.execute(id),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Approve or reject an adjustment\r\n   * When approved: Creates wallet transaction and updates branch balance\r\n   * When rejected: Just updates status\r\n   */\r\n  @Patch(':id/approve')\r\n  async approve(\r\n    @Param('id') id: number,\r\n    @Body() dto: ApproveAdjustmentDto,\r\n  ): Promise<WalletAdjustmentResponse> {\r\n    return WalletAdjustmentMapper.toResponse(\r\n      await this.approveAdjustmentUseCase.execute(+id, dto),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}