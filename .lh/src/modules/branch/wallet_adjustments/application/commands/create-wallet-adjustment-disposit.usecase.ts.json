{
    "sourceFile": "src/modules/branch/wallet_adjustments/application/commands/create-wallet-adjustment-disposit.usecase.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1761666026784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761666154366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n     @Inject(WALLET_TRANSACTION_REPOSITORY)\r\n     private readonly transactionRepo: IWalletTransactionRepository,\r\n     @Inject(DataSource)\r\n     private readonly dataSource: DataSource,\r\n+    \r\n   ) {}\r\n \r\n   /**\r\n    * Create a new wallet adjustment with automatic wallet transaction creation\r\n"
                },
                {
                    "date": 1761666162926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     @Inject(WALLET_TRANSACTION_REPOSITORY)\r\n     private readonly transactionRepo: IWalletTransactionRepository,\r\n     @Inject(DataSource)\r\n     private readonly dataSource: DataSource,\r\n-    \r\n+    private readonly FindOneBranchUseCase: FindOneBranchUseCase\r\n   ) {}\r\n \r\n   /**\r\n    * Create a new wallet adjustment with automatic wallet transaction creation\r\n"
                },
                {
                    "date": 1761666175019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n import { WalletTransaction } from '../../../wallet_transactions/domain/wallet-transaction.entity';\r\n import { CreateWalletAdjustmentDto, AdjustmentTypeEnum } from '../../dto/create-wallet-adjustment.dto';\r\n import { TransactionTypeEnum } from '../../../wallet_transactions/dto/create-wallet-transaction.dto';\r\n import { DataSource } from 'typeorm';\r\n+import { FindOneBranchUseCase } from 'src/modules/branch/branch/application/queries/findOne-branch.usecase';\r\n \r\n @Injectable()\r\n export class CreateWalletAdjustmentDispositUseCase {\r\n   constructor(\r\n@@ -32,21 +33,18 @@\n     @Inject(WALLET_TRANSACTION_REPOSITORY)\r\n     private readonly transactionRepo: IWalletTransactionRepository,\r\n     @Inject(DataSource)\r\n     private readonly dataSource: DataSource,\r\n-    private readonly FindOneBranchUseCase: FindOneBranchUseCase\r\n+    private readonly findOneBranchUseCase: FindOneBranchUseCase\r\n   ) {}\r\n \r\n   /**\r\n    * Create a new wallet adjustment with automatic wallet transaction creation\r\n    * This method handles ADD and DEDUCT operations correctly\r\n    */\r\n   async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n     // Validate branch exists\r\n-    const branch = await this.branchRepo.findById(dto.branch_id);\r\n-    if (!branch) {\r\n-      throw new NotFoundException(`Branch with ID ${dto.branch_id} not found`);\r\n-    }\r\n+    const branch = await this.findOneBranchUseCase.execute\r\n \r\n     // Generate unique adjustment number\r\n     const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n \r\n"
                },
                {
                    "date": 1761666183516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n    * This method handles ADD and DEDUCT operations correctly\r\n    */\r\n   async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n     // Validate branch exists\r\n-    const branch = await this.findOneBranchUseCase.execute\r\n+    const branch = await this.findOneBranchUseCase.execute(dto.)\r\n \r\n     // Generate unique adjustment number\r\n     const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n \r\n"
                },
                {
                    "date": 1761666224384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n    * This method handles ADD and DEDUCT operations correctly\r\n    */\r\n   async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n     // Validate branch exists\r\n-    const branch = await this.findOneBranchUseCase.execute(dto.)\r\n-\r\n+    const branch = await this.findOneBranchUseCase.execute(dto.branch_id)\r\n+ \r\n     // Generate unique adjustment number\r\n     const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n \r\n     // Get current wallet balance\r\n"
                },
                {
                    "date": 1761673120205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,11 +40,11 @@\n   /**\r\n    * Create a new wallet adjustment with automatic wallet transaction creation\r\n    * This method handles ADD and DEDUCT operations correctly\r\n    */\r\n-  async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n+  async execute(dto: CreateWalletAdjustmentDto, createdBy: number): Promise<WalletAdjustment> {\r\n     // Validate branch exists\r\n-    const branch = await this.findOneBranchUseCase.execute(dto.branch_id)\r\n+     await this.findOneBranchUseCase.execute(dto.branch_id)\r\n  \r\n     // Generate unique adjustment number\r\n     const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n \r\n@@ -57,8 +57,9 @@\n     // Create adjustment record with PENDING status\r\n     const adjustment = new WalletAdjustment({\r\n       ...dto,\r\n       adjustment_no: adjustmentNo,\r\n+      created_by: createdBy,\r\n       // status: 'PENDING',\r\n     });\r\n \r\n     const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n@@ -74,10 +75,10 @@\n       reference_id: savedAdjustment.value.id!,\r\n       reference_no: adjustmentNo,\r\n       description: `Wallet Adjustment (${dto.adjustment_type}): ${dto.reason}`,\r\n       notes: dto.description,\r\n-      created_by: dto.created_by,\r\n-      approved_by: dto.created_by,\r\n+      created_by: createdBy,\r\n+      approved_by: createdBy,\r\n       status: 'COMPLETED',\r\n     });\r\n \r\n     const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n@@ -89,9 +90,9 @@\n     const updatedAdjustment = new WalletAdjustment({\r\n       ...savedAdjustment.value,\r\n       wallet_transaction_id: savedTransaction.value.id!,\r\n       status: 'APPROVED', // Auto-approve adjustments\r\n-      approved_by: dto.created_by,\r\n+      approved_by: createdBy,\r\n     });\r\n \r\n     return this.adjustmentRepo.update(updatedAdjustment);\r\n   }\r\n"
                }
            ],
            "date": 1761666026784,
            "name": "Commit-0",
            "content": "import { \r\n  Injectable, \r\n  Inject, \r\n  NotFoundException, \r\n  BadRequestException \r\n} from '@nestjs/common';\r\nimport {\r\n  WALLET_ADJUSTMENT_REPOSITORY,\r\n  type IWalletAdjustmentRepository,\r\n} from '../../domain/wallet-adjustment.repository';\r\nimport {\r\n  BRANCH_REPOSITORY,\r\n  type IBranchRepository,\r\n} from '../../../branch/domain/branch.repository';\r\nimport {\r\n  WALLET_TRANSACTION_REPOSITORY,\r\n  type IWalletTransactionRepository,\r\n} from '../../../wallet_transactions/domain/wallet-transaction.repository';\r\nimport { WalletAdjustment } from '../../domain/wallet-adjustment.entity';\r\nimport { WalletTransaction } from '../../../wallet_transactions/domain/wallet-transaction.entity';\r\nimport { CreateWalletAdjustmentDto, AdjustmentTypeEnum } from '../../dto/create-wallet-adjustment.dto';\r\nimport { TransactionTypeEnum } from '../../../wallet_transactions/dto/create-wallet-transaction.dto';\r\nimport { DataSource } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class CreateWalletAdjustmentDispositUseCase {\r\n  constructor(\r\n    @Inject(WALLET_ADJUSTMENT_REPOSITORY)\r\n    private readonly adjustmentRepo: IWalletAdjustmentRepository,\r\n    @Inject(BRANCH_REPOSITORY)\r\n    private readonly branchRepo: IBranchRepository,\r\n    @Inject(WALLET_TRANSACTION_REPOSITORY)\r\n    private readonly transactionRepo: IWalletTransactionRepository,\r\n    @Inject(DataSource)\r\n    private readonly dataSource: DataSource,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new wallet adjustment with automatic wallet transaction creation\r\n   * This method handles ADD and DEDUCT operations correctly\r\n   */\r\n  async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n    // Validate branch exists\r\n    const branch = await this.branchRepo.findById(dto.branch_id);\r\n    if (!branch) {\r\n      throw new NotFoundException(`Branch with ID ${dto.branch_id} not found`);\r\n    }\r\n\r\n    // Generate unique adjustment number\r\n    const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n\r\n    // Get current wallet balance\r\n    const currentBalance = await this.branchRepo.getWalletBalance(dto.branch_id);\r\n  \r\n    // Calculate new balance - DEPOSIT always increases balance\r\n    const newBalance = currentBalance + dto.amount;\r\n\r\n    // Create adjustment record with PENDING status\r\n    const adjustment = new WalletAdjustment({\r\n      ...dto,\r\n      adjustment_no: adjustmentNo,\r\n      // status: 'PENDING',\r\n    });\r\n\r\n    const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n\r\n    // Create wallet transaction manually with correct balance calculation\r\n    const walletTransaction = new WalletTransaction({\r\n      branch_id: dto.branch_id,\r\n      transaction_type: TransactionTypeEnum.DEPOSIT,\r\n      amount: dto.amount,\r\n      balance_before: currentBalance,\r\n      balance_after: newBalance,\r\n      reference_type: 'WALLET_ADJUSTMENT',\r\n      reference_id: savedAdjustment.value.id!,\r\n      reference_no: adjustmentNo,\r\n      description: `Wallet Adjustment (${dto.adjustment_type}): ${dto.reason}`,\r\n      notes: dto.description,\r\n      created_by: dto.created_by,\r\n      approved_by: dto.created_by,\r\n      status: 'COMPLETED',\r\n    });\r\n\r\n    const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n\r\n    // Update branch wallet balance\r\n    await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n\r\n    // Link wallet transaction to adjustment\r\n    const updatedAdjustment = new WalletAdjustment({\r\n      ...savedAdjustment.value,\r\n      wallet_transaction_id: savedTransaction.value.id!,\r\n      status: 'APPROVED', // Auto-approve adjustments\r\n      approved_by: dto.created_by,\r\n    });\r\n\r\n    return this.adjustmentRepo.update(updatedAdjustment);\r\n  }\r\n}\r\n"
        }
    ]
}