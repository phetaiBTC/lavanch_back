{
    "sourceFile": "src/modules/branch/wallet_adjustments/application/commands/approve-adjustment.usecase.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1761672985370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761672998010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,10 @@\n   ) {}\r\n \r\n   async execute(\r\n     id: number,\r\n-    dto: ApproveAdjustmentDto, \r\n+    dto: ApproveAdjustmentDto,\r\n+    approvedBy: number,\r\n   ): Promise<WalletAdjustment> {\r\n     // Get adjustment\r\n     const adjustment = await this.adjustmentRepo.findById(id);\r\n     if (!adjustment) {\r\n"
                },
                {
                    "date": 1761673028365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     }\r\n \r\n     if (dto.action === ApprovalAction.REJECT) {\r\n       // Simply reject without creating wallet transaction\r\n-      const rejected = adjustment.reject(dto.approved_by);\r\n+      const rejected = adjustment.reject(approvedBy);\r\n       return this.adjustmentRepo.update(rejected);\r\n     }\r\n \r\n     // APPROVE: Determine transaction type based on adjustment type\r\n@@ -77,15 +77,15 @@\n         reference_id: adjustment.value.id!,\r\n         reference_no: adjustment.value.adjustment_no,\r\n         description: `Adjustment (${adjustment.value.adjustment_type}): ${adjustment.value.reason}`,\r\n         notes: adjustment.value.description,\r\n-        created_by: dto.approved_by,\r\n-        approved_by: dto.approved_by,\r\n+        created_by: approvedBy,\r\n+        approved_by: approvedBy,\r\n       });\r\n \r\n     // Approve adjustment and link wallet transaction\r\n     const approved = adjustment.approve(\r\n-      dto.approved_by,\r\n+      approvedBy,\r\n       walletTransaction.value.id!,\r\n     );\r\n \r\n     return this.adjustmentRepo.update(approved);\r\n"
                }
            ],
            "date": 1761672985370,
            "name": "Commit-0",
            "content": "import {\r\n  Injectable,\r\n  Inject,\r\n  NotFoundException,\r\n  BadRequestException,\r\n} from '@nestjs/common';\r\nimport {\r\n  WALLET_ADJUSTMENT_REPOSITORY,\r\n  type IWalletAdjustmentRepository,\r\n} from '../../domain/wallet-adjustment.repository';\r\nimport { WalletAdjustment } from '../../domain/wallet-adjustment.entity';\r\nimport {\r\n  ApproveAdjustmentDto,\r\n  ApprovalAction,\r\n} from '../../dto/approve-adjustment.dto';\r\nimport { CreateWalletTransactionUseCase } from '../../../wallet_transactions/application/commands/create-wallet-transaction.usecase';\r\nimport { TransactionTypeEnum } from '../../../wallet_transactions/dto/create-wallet-transaction.dto';\r\nimport { AdjustmentTypeEnum } from '../../dto/create-wallet-adjustment.dto';\r\n\r\n/**\r\n * ApproveAdjustmentUseCase\r\n * \r\n * This use case handles the approval or rejection of wallet adjustments.\r\n * When approved:\r\n * 1. Create a wallet transaction with type ADJUSTMENT\r\n * 2. If adjustment_type is ADD: increases branch balance\r\n * 3. If adjustment_type is DEDUCT: decreases branch balance\r\n * 4. Link the wallet transaction to the adjustment\r\n * 5. Update adjustment status to APPROVED\r\n */\r\n@Injectable()\r\nexport class ApproveAdjustmentUseCase {\r\n  constructor(\r\n    @Inject(WALLET_ADJUSTMENT_REPOSITORY)\r\n    private readonly adjustmentRepo: IWalletAdjustmentRepository,\r\n    private readonly createWalletTransactionUseCase: CreateWalletTransactionUseCase,\r\n  ) {}\r\n\r\n  async execute(\r\n    id: number,\r\n    dto: ApproveAdjustmentDto, \r\n  ): Promise<WalletAdjustment> {\r\n    // Get adjustment\r\n    const adjustment = await this.adjustmentRepo.findById(id);\r\n    if (!adjustment) {\r\n      throw new NotFoundException(`Adjustment with ID ${id} not found`);\r\n    }\r\n\r\n    // Validate adjustment status\r\n    if (adjustment.value.status !== 'PENDING') {\r\n      throw new BadRequestException(\r\n        `Adjustment is already ${adjustment.value.status.toLowerCase()}`,\r\n      );\r\n    }\r\n\r\n    if (dto.action === ApprovalAction.REJECT) {\r\n      // Simply reject without creating wallet transaction\r\n      const rejected = adjustment.reject(dto.approved_by);\r\n      return this.adjustmentRepo.update(rejected);\r\n    }\r\n\r\n    // APPROVE: Determine transaction type based on adjustment type\r\n    // ADD adjustment increases balance, DEDUCT adjustment decreases balance\r\n    const transactionType =\r\n      adjustment.value.adjustment_type === AdjustmentTypeEnum.ADD\r\n        ? TransactionTypeEnum.DEPOSIT // Use DEPOSIT to add balance\r\n        : TransactionTypeEnum.WITHDRAW; // Use WITHDRAW to deduct balance\r\n\r\n    // Create wallet transaction\r\n    const walletTransaction =\r\n      await this.createWalletTransactionUseCase.execute({\r\n        branch_id: adjustment.value.branch_id,\r\n        transaction_type: transactionType,\r\n        amount: adjustment.value.amount,\r\n        reference_type: 'ADJUSTMENT',\r\n        reference_id: adjustment.value.id!,\r\n        reference_no: adjustment.value.adjustment_no,\r\n        description: `Adjustment (${adjustment.value.adjustment_type}): ${adjustment.value.reason}`,\r\n        notes: adjustment.value.description,\r\n        created_by: dto.approved_by,\r\n        approved_by: dto.approved_by,\r\n      });\r\n\r\n    // Approve adjustment and link wallet transaction\r\n    const approved = adjustment.approve(\r\n      dto.approved_by,\r\n      walletTransaction.value.id!,\r\n    );\r\n\r\n    return this.adjustmentRepo.update(approved);\r\n  }\r\n}\r\n"
        }
    ]
}