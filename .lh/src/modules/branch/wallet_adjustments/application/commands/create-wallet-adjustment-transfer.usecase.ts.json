{
    "sourceFile": "src/modules/branch/wallet_adjustments/application/commands/create-wallet-adjustment-transfer.usecase.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1761667180957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761667849782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,24 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n-\r\n+    \r\n+     const walletTransaction = new WalletTransaction({\r\n+      branch_id: dto.branch_id,\r\n+      transaction_type: TransactionTypeEnum.WITHDRAW,\r\n+      amount: dto.amount,\r\n+      balance_before: currentBalance,\r\n+      balance_after: newBalance,\r\n+      reference_type: 'WALLET_ADJUSTMENT',\r\n+      reference_id: savedAdjustment.value.id!,\r\n+      reference_no: adjustmentNo,\r\n+      description: `Wallet Adjustment (${dto.adjustment_type}): ${dto.reason}`,\r\n+      notes: dto.description,\r\n+      created_by: dto.created_by,\r\n+      approved_by: dto.created_by,\r\n+      status: 'COMPLETED',\r\n+    });\r\n     const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n \r\n     // Update branch wallet balance\r\n     await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n"
                },
                {
                    "date": 1761667858994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \r\n     const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n \r\n     // Create wallet transaction manually with correct balance calculation\r\n-    const walletTransaction = new WalletTransaction({\r\n+    const walletTransactionOut = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n       amount: dto.amount,\r\n       balance_before: currentBalance,\r\n"
                },
                {
                    "date": 1761667866354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \r\n     const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n \r\n     // Create wallet transaction manually with correct balance calculation\r\n-    const walletTransactionOut = new WalletTransaction({\r\n+    const walletTransactionTran = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n       amount: dto.amount,\r\n       balance_before: currentBalance,\r\n"
                },
                {
                    "date": 1761667873662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \r\n     const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n \r\n     // Create wallet transaction manually with correct balance calculation\r\n-    const walletTransactionTran = new WalletTransaction({\r\n+    const walletTransactionTransferOut = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n       amount: dto.amount,\r\n       balance_before: currentBalance,\r\n@@ -87,9 +87,9 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n     \r\n-     const walletTransaction = new WalletTransaction({\r\n+     const walletTransactionT = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n       amount: dto.amount,\r\n       balance_before: currentBalance,\r\n"
                },
                {
                    "date": 1761667879618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n     \r\n-     const walletTransactionT = new WalletTransaction({\r\n+     const walletTransactionTransferIn = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n       amount: dto.amount,\r\n       balance_before: currentBalance,\r\n"
                },
                {
                    "date": 1761667930847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,9 @@\n       notes: dto.description,\r\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n+      \r\n     });\r\n     const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n \r\n     // Update branch wallet balance\r\n"
                },
                {
                    "date": 1761667939894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n       notes: dto.description,\r\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n-      \r\n+      re\r\n     });\r\n     const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n \r\n     // Update branch wallet balance\r\n"
                },
                {
                    "date": 1761667952692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n       notes: dto.description,\r\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n-      re\r\n+      related_branch_id: dto.related_branch_id,\r\n     });\r\n     const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n \r\n     // Update branch wallet balance\r\n"
                },
                {
                    "date": 1761667959301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n       notes: dto.description,\r\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n-      related_branch_id: dto.related_branch_id,\r\n+      related_branch_id: dto.branch_id,\r\n     });\r\n     const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n \r\n     // Update branch wallet balance\r\n"
                },
                {
                    "date": 1761667978599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n+    const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n     \r\n      const walletTransactionTransferIn = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n@@ -103,9 +104,8 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n     });\r\n-    const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n \r\n     // Update branch wallet balance\r\n     await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n \r\n"
                },
                {
                    "date": 1761667987005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n-    const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n+    const savedTransaction = await this.transactionRepo.create(walletTransactionTransferOut);\r\n     \r\n      const walletTransactionTransferIn = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n"
                },
                {
                    "date": 1761667994054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,9 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n     });\r\n+    const savedTransaction = await this.transactionRepo.create(walletTransactionTransferOut);\r\n \r\n     // Update branch wallet balance\r\n     await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n \r\n"
                },
                {
                    "date": 1761668002790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n     });\r\n-    const savedTransaction = await this.transactionRepo.create(walletTransactionTransferOut);\r\n+    const savedTransactionT = await this.transactionRepo.create(walletTransactionTransferOut);\r\n \r\n     // Update branch wallet balance\r\n     await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n \r\n"
                },
                {
                    "date": 1761668008629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n-    const savedTransaction = await this.transactionRepo.create(walletTransactionTransferOut);\r\n+    const savedTransactionT = await this.transactionRepo.create(walletTransactionTransferOut);\r\n     \r\n      const walletTransactionTransferIn = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n@@ -104,9 +104,9 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n     });\r\n-    const savedTransactionT = await this.transactionRepo.create(walletTransactionTransferOut);\r\n+    const savedTransactionTransferIn = await this.transactionRepo.create(walletTransactionTransferOut);\r\n \r\n     // Update branch wallet balance\r\n     await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n \r\n"
                },
                {
                    "date": 1761668018582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n     });\r\n-    const savedTransactionT = await this.transactionRepo.create(walletTransactionTransferOut);\r\n+    const savedTransactionTransferOut = await this.transactionRepo.create(walletTransactionTransferOut);\r\n     \r\n      const walletTransactionTransferIn = new WalletTransaction({\r\n       branch_id: dto.branch_id,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n@@ -112,9 +112,9 @@\n \r\n     // Link wallet transaction to adjustment\r\n     const updatedAdjustment = new WalletAdjustment({\r\n       ...savedAdjustment.value,\r\n-      wallet_transaction_id: savedTransaction.value.id!,\r\n+      wallet_transaction_id: savedTransactionTransferOut.value.id!,\r\n       status: 'APPROVED', // Auto-approve adjustments\r\n       approved_by: dto.created_by,\r\n     });\r\n \r\n"
                },
                {
                    "date": 1761668031760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n     });\r\n-    const savedTransactionTransferIn = await this.transactionRepo.create(walletTransactionTransferOut);\r\n+    const savedTransactionTransferIn = await this.transactionRepo.create(walletTransactionTransferIn);\r\n \r\n     // Update branch wallet balance\r\n     await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n \r\n"
                },
                {
                    "date": 1761668039402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,14 @@\n       wallet_transaction_id: savedTransactionTransferOut.value.id!,\r\n       status: 'APPROVED', // Auto-approve adjustments\r\n       approved_by: dto.created_by,\r\n     });\r\n+    const updatedAdjustment = new WalletAdjustment({\r\n+      ...savedAdjustment.value,\r\n+      wallet_transaction_id: savedTransactionTransferOut.value.id!,\r\n+      status: 'APPROVED', // Auto-approve adjustments\r\n+      approved_by: dto.created_by,\r\n+    });\r\n \r\n     return this.adjustmentRepo.update(updatedAdjustment);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1761668059053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,14 +116,9 @@\n       wallet_transaction_id: savedTransactionTransferOut.value.id!,\r\n       status: 'APPROVED', // Auto-approve adjustments\r\n       approved_by: dto.created_by,\r\n     });\r\n-    const updatedAdjustment = new WalletAdjustment({\r\n-      ...savedAdjustment.value,\r\n-      wallet_transaction_id: savedTransactionTransferOut.value.id!,\r\n-      status: 'APPROVED', // Auto-approve adjustments\r\n-      approved_by: dto.created_by,\r\n-    });\r\n \r\n+\r\n     return this.adjustmentRepo.update(updatedAdjustment);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1761668087373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n+      \r\n     });\r\n     const savedTransactionTransferIn = await this.transactionRepo.create(walletTransactionTransferIn);\r\n \r\n     // Update branch wallet balance\r\n"
                },
                {
                    "date": 1761668143135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n     });\r\n     const savedTransactionTransferOut = await this.transactionRepo.create(walletTransactionTransferOut);\r\n     \r\n      const walletTransactionTransferIn = new WalletTransaction({\r\n-      branch_id: dto.branch_id,\r\n+      branch_id: other branch id ,\r\n       transaction_type: TransactionTypeEnum.WITHDRAW,\r\n       amount: dto.amount,\r\n       balance_before: currentBalance,\r\n       balance_after: newBalance,\r\n@@ -103,9 +103,9 @@\n       created_by: dto.created_by,\r\n       approved_by: dto.created_by,\r\n       status: 'COMPLETED',\r\n       related_branch_id: dto.branch_id,\r\n-      \r\n+      related_transaction_id: savedTransactionTransferOut.value.id!,\r\n     });\r\n     const savedTransactionTransferIn = await this.transactionRepo.create(walletTransactionTransferIn);\r\n \r\n     // Update branch wallet balance\r\n"
                },
                {
                    "date": 1761669393222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,10 @@\n   type IWalletTransactionRepository,\r\n } from '../../../wallet_transactions/domain/wallet-transaction.repository';\r\n import { WalletAdjustment } from '../../domain/wallet-adjustment.entity';\r\n import { WalletTransaction } from '../../../wallet_transactions/domain/wallet-transaction.entity';\r\n-import { CreateWalletAdjustmentDto, AdjustmentTypeEnum } from '../../dto/create-wallet-adjustment.dto';\r\n+import { CreateWalletTransferDto } from '../../dto/create-wallet-transfer.dto';\r\n+import { AdjustmentTypeEnum } from '../../dto/create-wallet-adjustment.dto';\r\n import { TransactionTypeEnum } from '../../../wallet_transactions/dto/create-wallet-transaction.dto';\r\n import { DataSource } from 'typeorm';\r\n \r\n @Injectable()\r\n@@ -35,91 +36,121 @@\n     private readonly dataSource: DataSource,\r\n   ) {}\r\n \r\n   /**\r\n-   * Create a new wallet adjustment with automatic wallet transaction creation\r\n-   * This method handles ADD and DEDUCT operations correctly\r\n+   * Create a wallet transfer between two branches\r\n+   * This method handles transfer with proper balance validation and atomic transactions\r\n    */\r\n-  async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n-    // Validate branch exists\r\n-    const branch = await this.branchRepo.findById(dto.branch_id);\r\n-    if (!branch) {\r\n-      throw new NotFoundException(`Branch with ID ${dto.branch_id} not found`);\r\n+  async execute(dto: CreateWalletTransferDto): Promise<WalletAdjustment> {\r\n+    // Validate sender and receiver are different branches\r\n+    if (dto.branch_id === dto.receiver_branch_id) {\r\n+      throw new BadRequestException('Cannot transfer to the same branch');\r\n     }\r\n \r\n-    // Generate unique adjustment number\r\n-    const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n+    // Validate both branches exist\r\n+    const [senderBranch, receiverBranch] = await Promise.all([\r\n+      this.branchRepo.findById(dto.branch_id),\r\n+      this.branchRepo.findById(dto.receiver_branch_id),\r\n+    ]);\r\n \r\n-    // Get current wallet balance\r\n-    const currentBalance = await this.branchRepo.getWalletBalance(dto.branch_id);\r\n+    if (!senderBranch) {\r\n+      throw new NotFoundException(`Sender branch with ID ${dto.branch_id} not found`);\r\n+    }\r\n \r\n-    // Calculate new balance - WITHDRAW always decreases balance\r\n-    const newBalance = currentBalance - dto.amount;\r\n-    \r\n-    // Prevent negative balance for withdrawal operations\r\n-    if (newBalance < 0) {\r\n-      throw new BadRequestException(\r\n-        `Insufficient balance. Current: ${currentBalance}, Required: ${dto.amount}`\r\n-      );\r\n+    if (!receiverBranch) {\r\n+      throw new NotFoundException(`Receiver branch with ID ${dto.receiver_branch_id} not found`);\r\n     }\r\n \r\n-    // Create adjustment record with PENDING status\r\n-    const adjustment = new WalletAdjustment({\r\n-      ...dto,\r\n-      adjustment_no: adjustmentNo,\r\n-      // status: 'PENDING',\r\n-    });\r\n+    // Run everything in a database transaction for atomicity\r\n+    return await this.dataSource.transaction(async (manager) => {\r\n+      // Generate unique adjustment number\r\n+      const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n \r\n-    const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n+      // Get current wallet balances for both branches\r\n+      const [senderBalance, receiverBalance] = await Promise.all([\r\n+        this.branchRepo.getWalletBalance(dto.branch_id),\r\n+        this.branchRepo.getWalletBalance(dto.receiver_branch_id),\r\n+      ]);\r\n \r\n-    // Create wallet transaction manually with correct balance calculation\r\n-    const walletTransactionTransferOut = new WalletTransaction({\r\n-      branch_id: dto.branch_id,\r\n-      transaction_type: TransactionTypeEnum.WITHDRAW,\r\n-      amount: dto.amount,\r\n-      balance_before: currentBalance,\r\n-      balance_after: newBalance,\r\n-      reference_type: 'WALLET_ADJUSTMENT',\r\n-      reference_id: savedAdjustment.value.id!,\r\n-      reference_no: adjustmentNo,\r\n-      description: `Wallet Adjustment (${dto.adjustment_type}): ${dto.reason}`,\r\n-      notes: dto.description,\r\n-      created_by: dto.created_by,\r\n-      approved_by: dto.created_by,\r\n-      status: 'COMPLETED',\r\n-    });\r\n-    const savedTransactionTransferOut = await this.transactionRepo.create(walletTransactionTransferOut);\r\n-    \r\n-     const walletTransactionTransferIn = new WalletTransaction({\r\n-      branch_id: other branch id ,\r\n-      transaction_type: TransactionTypeEnum.WITHDRAW,\r\n-      amount: dto.amount,\r\n-      balance_before: currentBalance,\r\n-      balance_after: newBalance,\r\n-      reference_type: 'WALLET_ADJUSTMENT',\r\n-      reference_id: savedAdjustment.value.id!,\r\n-      reference_no: adjustmentNo,\r\n-      description: `Wallet Adjustment (${dto.adjustment_type}): ${dto.reason}`,\r\n-      notes: dto.description,\r\n-      created_by: dto.created_by,\r\n-      approved_by: dto.created_by,\r\n-      status: 'COMPLETED',\r\n-      related_branch_id: dto.branch_id,\r\n-      related_transaction_id: savedTransactionTransferOut.value.id!,\r\n-    });\r\n-    const savedTransactionTransferIn = await this.transactionRepo.create(walletTransactionTransferIn);\r\n+      // Calculate new balances\r\n+      const newSenderBalance = senderBalance - dto.amount;\r\n+      const newReceiverBalance = receiverBalance + dto.amount;\r\n \r\n-    // Update branch wallet balance\r\n-    await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n+      // Prevent negative balance for sender\r\n+      if (newSenderBalance < 0) {\r\n+        throw new BadRequestException(\r\n+          `Insufficient balance in sender branch. Current: ${senderBalance}, Required: ${dto.amount}`\r\n+        );\r\n+      }\r\n \r\n-    // Link wallet transaction to adjustment\r\n-    const updatedAdjustment = new WalletAdjustment({\r\n-      ...savedAdjustment.value,\r\n-      wallet_transaction_id: savedTransactionTransferOut.value.id!,\r\n-      status: 'APPROVED', // Auto-approve adjustments\r\n-      approved_by: dto.created_by,\r\n-    });\r\n+      // Create adjustment record for the transfer\r\n+      const adjustment = new WalletAdjustment({\r\n+        branch_id: dto.branch_id,\r\n+        adjustment_type: AdjustmentTypeEnum.DEDUCT,\r\n+        amount: dto.amount,\r\n+        reason: 'TRANSFER' as any, // Add TRANSFER to AdjustmentReasonEnum if needed\r\n+        description: dto.description || `Transfer to branch ${dto.receiver_branch_id}`,\r\n+        created_by: dto.created_by,\r\n+        adjustment_no: adjustmentNo,\r\n+        status: 'APPROVED',\r\n+        approved_by: dto.created_by,\r\n+      });\r\n \r\n+      const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n \r\n-    return this.adjustmentRepo.update(updatedAdjustment);\r\n+      // Create TRANSFER_OUT transaction for sender branch\r\n+      const transferOutTransaction = new WalletTransaction({\r\n+        branch_id: dto.branch_id,\r\n+        transaction_type: TransactionTypeEnum.TRANSFER_OUT,\r\n+        amount: dto.amount,\r\n+        balance_before: senderBalance,\r\n+        balance_after: newSenderBalance,\r\n+        reference_type: 'WALLET_TRANSFER',\r\n+        reference_id: savedAdjustment.value.id!,\r\n+        reference_no: adjustmentNo,\r\n+        related_branch_id: dto.receiver_branch_id,\r\n+        description: `Transfer to branch ${dto.receiver_branch_id}`,\r\n+        notes: dto.description,\r\n+        created_by: dto.created_by,\r\n+        approved_by: dto.created_by,\r\n+        status: 'COMPLETED',\r\n+      });\r\n+\r\n+      const savedTransferOut = await this.transactionRepo.create(transferOutTransaction);\r\n+\r\n+      // Create TRANSFER_IN transaction for receiver branch\r\n+      const transferInTransaction = new WalletTransaction({\r\n+        branch_id: dto.receiver_branch_id,\r\n+        transaction_type: TransactionTypeEnum.TRANSFER_IN,\r\n+        amount: dto.amount,\r\n+        balance_before: receiverBalance,\r\n+        balance_after: newReceiverBalance,\r\n+        reference_type: 'WALLET_TRANSFER',\r\n+        reference_id: savedAdjustment.value.id!,\r\n+        reference_no: adjustmentNo,\r\n+        related_branch_id: dto.branch_id,\r\n+        related_transaction_id: savedTransferOut.value.id!,\r\n+        description: `Transfer from branch ${dto.branch_id}`,\r\n+        notes: dto.description,\r\n+        created_by: dto.created_by,\r\n+        approved_by: dto.created_by,\r\n+        status: 'COMPLETED',\r\n+      });\r\n+\r\n+      await this.transactionRepo.create(transferInTransaction);\r\n+\r\n+      // Update both branch wallet balances\r\n+      await Promise.all([\r\n+        this.branchRepo.updateWalletBalance(dto.branch_id, newSenderBalance),\r\n+        this.branchRepo.updateWalletBalance(dto.receiver_branch_id, newReceiverBalance),\r\n+      ]);\r\n+\r\n+      // Link the outgoing transaction to the adjustment\r\n+      const updatedAdjustment = new WalletAdjustment({\r\n+        ...savedAdjustment.value,\r\n+        wallet_transaction_id: savedTransferOut.value.id!,\r\n+      });\r\n+\r\n+      return this.adjustmentRepo.update(updatedAdjustment);\r\n+    });\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1761672764992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n   /**\r\n    * Create a wallet transfer between two branches\r\n    * This method handles transfer with proper balance validation and atomic transactions\r\n    */\r\n-  async execute(dto: CreateWalletTransferDto): Promise<WalletAdjustment> {\r\n+  async execute(dto: CreateWalletTransferDto, createdBy: number): Promise<WalletAdjustment> {\r\n     // Validate sender and receiver are different branches\r\n     if (dto.branch_id === dto.receiver_branch_id) {\r\n       throw new BadRequestException('Cannot transfer to the same branch');\r\n     }\r\n@@ -88,12 +88,12 @@\n         adjustment_type: AdjustmentTypeEnum.DEDUCT,\r\n         amount: dto.amount,\r\n         reason: 'TRANSFER' as any, // Add TRANSFER to AdjustmentReasonEnum if needed\r\n         description: dto.description || `Transfer to branch ${dto.receiver_branch_id}`,\r\n-        created_by: dto.created_by,\r\n+        created_by: createdBy,\r\n         adjustment_no: adjustmentNo,\r\n         status: 'APPROVED',\r\n-        approved_by: dto.created_by,\r\n+        approved_by: createdBy,\r\n       });\r\n \r\n       const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n \r\n@@ -109,10 +109,10 @@\n         reference_no: adjustmentNo,\r\n         related_branch_id: dto.receiver_branch_id,\r\n         description: `Transfer to branch ${dto.receiver_branch_id}`,\r\n         notes: dto.description,\r\n-        created_by: dto.created_by,\r\n-        approved_by: dto.created_by,\r\n+        created_by: createdBy,\r\n+        approved_by: createdBy,\r\n         status: 'COMPLETED',\r\n       });\r\n \r\n       const savedTransferOut = await this.transactionRepo.create(transferOutTransaction);\r\n@@ -130,10 +130,10 @@\n         related_branch_id: dto.branch_id,\r\n         related_transaction_id: savedTransferOut.value.id!,\r\n         description: `Transfer from branch ${dto.branch_id}`,\r\n         notes: dto.description,\r\n-        created_by: dto.created_by,\r\n-        approved_by: dto.created_by,\r\n+        created_by: createdBy,\r\n+        approved_by: createdBy,\r\n         status: 'COMPLETED',\r\n       });\r\n \r\n       await this.transactionRepo.create(transferInTransaction);\r\n"
                }
            ],
            "date": 1761667180957,
            "name": "Commit-0",
            "content": "import { \r\n  Injectable, \r\n  Inject, \r\n  NotFoundException, \r\n  BadRequestException \r\n} from '@nestjs/common';\r\nimport {\r\n  WALLET_ADJUSTMENT_REPOSITORY,\r\n  type IWalletAdjustmentRepository,\r\n} from '../../domain/wallet-adjustment.repository';\r\nimport {\r\n  BRANCH_REPOSITORY,\r\n  type IBranchRepository,\r\n} from '../../../branch/domain/branch.repository';\r\nimport {\r\n  WALLET_TRANSACTION_REPOSITORY,\r\n  type IWalletTransactionRepository,\r\n} from '../../../wallet_transactions/domain/wallet-transaction.repository';\r\nimport { WalletAdjustment } from '../../domain/wallet-adjustment.entity';\r\nimport { WalletTransaction } from '../../../wallet_transactions/domain/wallet-transaction.entity';\r\nimport { CreateWalletAdjustmentDto, AdjustmentTypeEnum } from '../../dto/create-wallet-adjustment.dto';\r\nimport { TransactionTypeEnum } from '../../../wallet_transactions/dto/create-wallet-transaction.dto';\r\nimport { DataSource } from 'typeorm';\r\n\r\n@Injectable()\r\nexport class CreateWalletAdjustmentTransferUseCase {\r\n  constructor(\r\n    @Inject(WALLET_ADJUSTMENT_REPOSITORY)\r\n    private readonly adjustmentRepo: IWalletAdjustmentRepository,\r\n    @Inject(BRANCH_REPOSITORY)\r\n    private readonly branchRepo: IBranchRepository,\r\n    @Inject(WALLET_TRANSACTION_REPOSITORY)\r\n    private readonly transactionRepo: IWalletTransactionRepository,\r\n    @Inject(DataSource)\r\n    private readonly dataSource: DataSource,\r\n  ) {}\r\n\r\n  /**\r\n   * Create a new wallet adjustment with automatic wallet transaction creation\r\n   * This method handles ADD and DEDUCT operations correctly\r\n   */\r\n  async execute(dto: CreateWalletAdjustmentDto): Promise<WalletAdjustment> {\r\n    // Validate branch exists\r\n    const branch = await this.branchRepo.findById(dto.branch_id);\r\n    if (!branch) {\r\n      throw new NotFoundException(`Branch with ID ${dto.branch_id} not found`);\r\n    }\r\n\r\n    // Generate unique adjustment number\r\n    const adjustmentNo = await this.adjustmentRepo.generateAdjustmentNo();\r\n\r\n    // Get current wallet balance\r\n    const currentBalance = await this.branchRepo.getWalletBalance(dto.branch_id);\r\n\r\n    // Calculate new balance - WITHDRAW always decreases balance\r\n    const newBalance = currentBalance - dto.amount;\r\n    \r\n    // Prevent negative balance for withdrawal operations\r\n    if (newBalance < 0) {\r\n      throw new BadRequestException(\r\n        `Insufficient balance. Current: ${currentBalance}, Required: ${dto.amount}`\r\n      );\r\n    }\r\n\r\n    // Create adjustment record with PENDING status\r\n    const adjustment = new WalletAdjustment({\r\n      ...dto,\r\n      adjustment_no: adjustmentNo,\r\n      // status: 'PENDING',\r\n    });\r\n\r\n    const savedAdjustment = await this.adjustmentRepo.create(adjustment);\r\n\r\n    // Create wallet transaction manually with correct balance calculation\r\n    const walletTransaction = new WalletTransaction({\r\n      branch_id: dto.branch_id,\r\n      transaction_type: TransactionTypeEnum.WITHDRAW,\r\n      amount: dto.amount,\r\n      balance_before: currentBalance,\r\n      balance_after: newBalance,\r\n      reference_type: 'WALLET_ADJUSTMENT',\r\n      reference_id: savedAdjustment.value.id!,\r\n      reference_no: adjustmentNo,\r\n      description: `Wallet Adjustment (${dto.adjustment_type}): ${dto.reason}`,\r\n      notes: dto.description,\r\n      created_by: dto.created_by,\r\n      approved_by: dto.created_by,\r\n      status: 'COMPLETED',\r\n    });\r\n\r\n    const savedTransaction = await this.transactionRepo.create(walletTransaction);\r\n\r\n    // Update branch wallet balance\r\n    await this.branchRepo.updateWalletBalance(dto.branch_id, newBalance);\r\n\r\n    // Link wallet transaction to adjustment\r\n    const updatedAdjustment = new WalletAdjustment({\r\n      ...savedAdjustment.value,\r\n      wallet_transaction_id: savedTransaction.value.id!,\r\n      status: 'APPROVED', // Auto-approve adjustments\r\n      approved_by: dto.created_by,\r\n    });\r\n\r\n    return this.adjustmentRepo.update(updatedAdjustment);\r\n  }\r\n}\r\n"
        }
    ]
}