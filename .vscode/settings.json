{
  "folderTemplates.structures": [
    {
      "name": "DDD Module Template NestJS",
      "omitParentDirectory": true,
      "structure": [
        {
          "fileName": "dto/create-<FTName | pascalcase>.dto.ts",
          "template": "Create Name DTO"
        },
        {
          "fileName": "dto/update-<FTName | pascalcase>.dto.ts",
          "template": "Update Name DTO"
        },
        {
          "fileName": "application/commands/create-<FTName | pascalcase>.usecase.ts",
          "template": "Create Name Command"
        },
        {
          "fileName": "application/commands/update-<FTName | pascalcase>.usecase.ts",
          "template": "Update Name Command"
        },
        {
          "fileName": "application/commands/soft-<FTName | pascalcase>.usecase.ts",
          "template": "Soft Name Command"
        },
        {
          "fileName": "application/commands/hard-<FTName | pascalcase>.usecase.ts",
          "template": "Hard Name Command"
        },
        {
          "fileName": "application/commands/restore-<FTName | pascalcase>.usecase.ts",
          "template": "Restore Name Command"
        },
        {
          "fileName": "application/queries/find-<FTName | pascalcase>.usecase.ts",
          "template": "Find Name Query"
        },
        {
          "fileName": "application/queries/findOne-<FTName | pascalcase>.usecase.ts",
          "template": "Find One Name Query"
        },
        {
          "fileName": "domain/<FTName | lowercase>.entity.ts",
          "template": "Name Entity"
        },
        {
          "fileName": "domain/<FTName | lowercase>.repository.ts",
          "template": "Name Repository"
        },
        {
          "fileName": "infrastructure/<FTName | lowercase>.repository.impl.ts",
          "template": "Name Repository Impl"
        },
        {
          "fileName": "infrastructure/<FTName | lowercase>.mapper.ts",
          "template": "Name Mapper"
        },
        {
          "fileName": "interface/<FTName | lowercase>.interface.ts",
          "template": "Name Interface"
        },
        {
          "fileName": "<FTName | lowercase>.controller.ts",
          "template": "Name Controller"
        },
        {
          "fileName": "<FTName | lowercase>.module.ts",
          "template": "Name Module"
        }
      ]
    }
  ],
  "folderTemplates.fileTemplates": {
    "Name Entity": [
      "import { <FTName | pascalcase>Props } from '../interface/<FTName | lowercase>.interface';",
      "export class <FTName | pascalcase> {",
      "private id: number | null;private createdAt: Date;private updatedAt: Date;private deletedAt: Date | null;",
      "constructor(props: <FTName | pascalcase>Props) {",
      "this.id = props.id ?? null;",
      "this.createdAt = props.createdAt ?? new Date();",
      "this.updatedAt = props.updatedAt ?? new Date();",
      "this.deletedAt = props.deletedAt ?? null;}",
      "get value() {return{id: this.id,createdAt: this.createdAt,updatedAt: this.updatedAt,deletedAt: this.deletedAt}}",
      "}"
    ],
    "Create Name DTO": [
      "import { IsEmail, IsNotEmpty, IsString } from 'class-validator';",
      "export class Create<FTName | pascalcase>Dto {",
      "}"
    ],
    "Update Name DTO": [
      "import { IsEmail, IsNotEmpty, IsString } from 'class-validator';",
      "export class Update<FTName | pascalcase>Dto {",
      "}"
    ],
    "Create Name Command": [
      "import { BadRequestException, Inject, Injectable } from '@nestjs/common';import {<FTName | uppercase>_REPOSITORY,type I<FTName | pascalcase>Repository,} from '../../domain/repositories/<FTName | lowercase>.repository';",
      "import { <FTName | pascalcase> } from '../../domain/<FTName | lowercase>.entity';import { Create<FTName | pascalcase>Dto } from '../../dto/create-<FTName | pascalcase>.dto';",
      "@Injectable() export class Create<FTName | pascalcase>UseCase {",
      "constructor(@Inject(<FTName | uppercase>_REPOSITORY) private readonly <FTName | lowercase>Repo: I<FTName | pascalcase>Repository,) {}",
      "async execute(dto: Create<FTName | pascalcase>Dto): Promise<<FTName | pascalcase>> {const <FTName | lowercase> = new <FTName | pascalcase>({...dto});return this.<FTName | lowercase>Repo.create(<FTName | lowercase>);",
      "}",
      "}"
    ],
    "Soft Name Command": [
      "import { BadRequestException, Inject, Injectable } from '@nestjs/common';import {<FTName | uppercase>_REPOSITORY,type I<FTName | pascalcase>Repository,} from '../../domain/repositories/<FTName | lowercase>.repository';",
      "import { <FTName | pascalcase> } from '../../domain/<FTName | lowercase>.entity';import { Create<FTName | pascalcase>Dto } from '../../dto/create-<FTName | pascalcase>.dto';",
      "@Injectable() export class SoftDelete<FTName | pascalcase>UseCase {",
      "constructor(@Inject(<FTName | uppercase>_REPOSITORY) private readonly <FTName | lowercase>Repo: I<FTName | pascalcase>Repository,) {}",
      "async execute(id: number): Promise<{message: string}> {const <FTName | lowercase> = await this.<FTName | lowercase>Repo.findById(id);if (!<FTName | lowercase>) throw new NotFoundException('<FTName | pascalcase> not found');return this.<FTName | lowercase>Repo.softDelete(id);",
      "}",
      "}"
    ],
    "Hard Name Command": [
      "import { BadRequestException, Inject, Injectable } from '@nestjs/common';import {<FTName | uppercase>_REPOSITORY,type I<FTName | pascalcase>Repository,} from '../../domain/repositories/<FTName | lowercase>.repository';",
      "import { <FTName | pascalcase> } from '../../domain/<FTName | lowercase>.entity';import { Create<FTName | pascalcase>Dto } from '../../dto/create-<FTName | pascalcase>.dto';",
      "@Injectable() export class HardDelete<FTName | pascalcase>UseCase {",
      "constructor(@Inject(<FTName | uppercase>_REPOSITORY) private readonly <FTName | lowercase>Repo: I<FTName | pascalcase>Repository,) {}",
      "async execute(id: number): Promise<{message: string}> {const <FTName | lowercase> = await this.<FTName | lowercase>Repo.findById(id);if (!<FTName | lowercase>) throw new NotFoundException('<FTName | pascalcase> not found');return this.<FTName | lowercase>Repo.hardDelete(id);",
      "}",
      "}"
    ],
    "Restore Name Command": [
      "import { BadRequestException, Inject, Injectable } from '@nestjs/common';import {<FTName | uppercase>_REPOSITORY,type I<FTName | pascalcase>Repository,} from '../../domain/repositories/<FTName | lowercase>.repository';",
      "import { <FTName | pascalcase> } from '../../domain/<FTName | lowercase>.entity';import { Create<FTName | pascalcase>Dto } from '../../dto/create-<FTName | pascalcase>.dto';",
      "@Injectable() export class Restore<FTName | pascalcase>UseCase {",
      "constructor(@Inject(<FTName | uppercase>_REPOSITORY) private readonly <FTName | lowercase>Repo: I<FTName | pascalcase>Repository,) {}",
      "async execute(id: number): Promise<{message: string}> {const <FTName | lowercase> = await this.<FTName | lowercase>Repo.findById(id);if (!<FTName | lowercase>) throw new NotFoundException('<FTName | pascalcase> not found');return this.<FTName | lowercase>Repo.restore(id);",
      "}",
      "}"
    ],
    "Find Name Query": [
      "import {  Inject, Injectable } from '@nestjs/common';import {<FTName | uppercase>_REPOSITORY,type I<FTName | pascalcase>Repository,} from '../../domain/repositories/<FTName | lowercase>.repository';",
      "import { <FTName | pascalcase> } from '../../domain/<FTName | lowercase>.entity';import { <FTName | pascalcase> } from '../../domain/<FTName | lowercase>.entity';import { PaginationDto } from 'src/shared/dto/pagination.dto';import { PaginatedResponse } from 'src/shared/interface/pagination.interface';",
      "@Injectable() export class Find<FTName | pascalcase>UseCase {",
      "constructor(@Inject(<FTName | uppercase>_REPOSITORY) private readonly <FTName | lowercase>Repo: I<FTName | pascalcase>Repository,) {}",
      "async execute(query: PaginationDto): Promise<PaginatedResponse<<FTName | pascalcase>>> {return await this.<FTName | lowercase>Repo.findAll(query);",
      "}",
      "}"
    ]
  }
}
